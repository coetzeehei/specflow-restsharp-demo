// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UserRegisterSpecs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Registering Users", Description="\tIn order to a keep track of my members\r\n\tAs a club manager\r\n\tI want to record ne" +
        "w members", SourceFile="RegisteringUsers.feature", SourceLine=0)]
    public partial class RegisteringUsersFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "RegisteringUsers.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Registering Users", "\tIn order to a keep track of my members\r\n\tAs a club manager\r\n\tI want to record ne" +
                    "w members", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Add a new user", SourceLine=5)]
        public virtual void AddANewUser()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a new user", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Password",
                        "Telephone Number",
                        "Street",
                        "City",
                        "Country"});
            table1.AddRow(new string[] {
                        "Jack Sparrow",
                        "pirat3s",
                        "07568953571",
                        "10 Main Street",
                        "Nassau",
                        "Bahamas"});
#line 7
 testRunner.Given("a new user", ((string)(null)), table1, "Given ");
#line 10
 testRunner.When("he registers online", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
 testRunner.Then("he should be assigned a unique account number", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Users with the same name cannot register twice", SourceLine=12)]
        public virtual void UsersWithTheSameNameCannotRegisterTwice()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Users with the same name cannot register twice", ((string[])(null)));
#line 13
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Password",
                        "Telephone Number",
                        "Street",
                        "City",
                        "Country"});
            table2.AddRow(new string[] {
                        "Jack Sparrow",
                        "pirat1s",
                        "07568953571",
                        "10 Main Street",
                        "Nassau",
                        "Bahamas"});
            table2.AddRow(new string[] {
                        "Jack Rackham",
                        "pirat2s",
                        "07568953572",
                        "12 Main Street",
                        "Nassau",
                        "Bahamas"});
#line 14
 testRunner.Given("the following registered users", ((string)(null)), table2, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Password",
                        "Telephone Number",
                        "Street",
                        "City",
                        "Country"});
            table3.AddRow(new string[] {
                        "Jack Sparrow",
                        "pirat3s",
                        "07568953574",
                        "20 Main Street",
                        "Nassau",
                        "Bahamas"});
#line 18
 testRunner.And("a new user", ((string)(null)), table3, "And ");
#line 21
 testRunner.When("he tries to register online", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 22
 testRunner.Then("his request should be rejected with a Conflict error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
